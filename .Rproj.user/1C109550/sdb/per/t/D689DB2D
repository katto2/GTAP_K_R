{
    "collab_server" : "",
    "contents" : "\n#setwd(\"C:/Users/sungw/OneDrive/work_2016/0000_Hybrid_2nd/CGE/SAM\")\n######### Part A. preparation\n#(i)load GHG data\n#GHG_IO_ind=read.csv(file=\"./GTAP_K_R/GIO_2010.csv\",header=T, as.is=T)\n#GHG_IO_F=read.csv(file=\"./GTAP_K_R/GIO_FD_2010.csv\",header=T, as.is=T)\n#GHG_Process=read.csv(file=\"./GTAP_K_R/GHG_p_2010.csv\",header=T,as.is=T)\n\nGHG_IO_ind=read.csv(file=\"EIO_2010.csv\",header=T, as.is=T)\nGHG_IO_F=read.csv(file=\"EIO_FD_2010.csv\",header=T, as.is=T)\n#GHG_Process=read.csv(file=\"GHG_p_2010.csv\",header=T,as.is=T)\n#load index mapping\n#sector_ind=read.csv(file=\"./IND/indcode_20160621.csv\",header=T, as.is=T)\n#sec_BR=read.csv(file=\"./IO/sector_BR.csv\",header=T, as.is=T)\nsector_ind=read.csv(file=\"indcode_20160621.csv\",header=T, as.is=T)\nsec_BR=read.csv(file=\"sector_BR.csv\",header=T, as.is=T)\n\nsec_BR=sec_BR[,-1]\n#(ii)preparing index\n\nrow_ind=sector_ind[,c(1,3)]\ncol_ind=sector_ind[,c(4,6)]\nsec_dict=sector_ind[,7:8]\n\nIOind_model=row_ind[(1:384),]\n\nsec_dict=sec_dict[!is.na(sec_dict[,1]),]\n##(iii) preparing sector numbers\nnsector=dim(sec_dict)[1]\n#nBR=length(unique(sec_BR[,3]))\n\n## (iv) sector dictionary\n#BR_dict=unique(sec_BR[,3:4])\n\n###### Part B. GHG_ind\n### I. IO to model\n## Step 1. get dimmension of IO\ndim_GHG_IO_ind=dim(GHG_IO_ind)\n\n## Step 2. Rowsum:  merge and obtain rowsum using aggregate function\nGHG_IO_ind$sector=as.numeric(substr(GHG_IO_ind$X,2,nchar(GHG_IO_ind$X)))\n\nGHG_sec=merge(GHG_IO_ind,IOind_model, by.x=\"sector\", by.y=\"basecode_row\", all.x=T)\nGHG_row_model=aggregate(GHG_sec[,3:(dim_GHG_IO_ind[2]+1)],list(GHG_sec$sector_row),FUN=sum)\n\ndim_GHG_row_model=dim(GHG_row_model)\n## Step 3. Colsum: transpose rowsum, merge with IOind_model index matching, take rowsum using aggregate function\n#3-1. keep row index\nrowindex_model=GHG_row_model[,1]\n#3-2. transpose\nT_GHG_model=data.frame(t(GHG_row_model))\nT_GHG_model=T_GHG_model[-1,]\nT_GHG_model$xsec=rownames(T_GHG_model)#preparing merging index\n\n#3-3. merge\nIOind_model$xsec=paste(\"X\",IOind_model[,1],sep=\"\")\nT_GHG_model_name=merge(T_GHG_model,IOind_model,by=\"xsec\",all.x=T,sort=F)\n\n#3-4. aggregate\n\nGHG_model_0=aggregate(T_GHG_model_name[,2:(dim_GHG_row_model[1]+1)],list(T_GHG_model_name$sector_row),FUN=sum)\nGHG_model_0=data.frame(t(GHG_model_0))\n\n## Step 4. set index for model IO\ncolindex_GHG_model=as.numeric(GHG_model_0[\"Group.1\",])\nrowindex_GHG_model=rowindex_model\n\n## Step 5.  keep only numeric values \nGHG_model_Ind=(GHG_model_0[-1,])\n## Step 6. Add row and column names\ncolnames(GHG_model_Ind)=sec_dict[colindex_GHG_model,2]\nrownames(GHG_model_Ind)=sec_dict[rowindex_GHG_model,2]\n\n###### Part D. GHG_F\n\n##(i) model GHG_F\n# step 1. merge with model ind\nGHG_F_model=merge(GHG_IO_F,IOind_model, by.x=\"X\", by.y=\"xsec\",all.x=T,sort=F)\n\n# step 2. aggregate by \"sector_row(model variable)\"\n\nGHG_F_model=data.frame(aggregate(GHG_F_model[,\"Final_Pc\"],list(GHG_F_model[,\"sector_row\"]),FUN=sum))\n\n# step 3. obtain model F \nrownames(GHG_F_model)=sec_dict[GHG_F_model[,\"Group.1\"],2]\ncolnames(GHG_F_model)=c(\"model_ind\", \"Household\")\n\n\n\n\n############### Part D. merge IND and F\nGHG_model_Ind$rowindex=rownames(GHG_model_Ind)\nGHG_F_model$rowindex=rownames(GHG_F_model)\nGHG_F_model=GHG_F_model[-1]\nGHG_model=merge(GHG_model_Ind,GHG_F_model, by=\"rowindex\",all=T,sort=F)\nrownames(GHG_model)=GHG_model$rowindex\nGHG_model=GHG_model[,-1]\n\n\n############### Part E. Add process\n\n#T_GHG_process_core=data.frame(t(GHG_Process[,-(1:2)]))\n#colnames(T_GHG_process_core)=GHG_Process[,2]\n#T_GHG_process_core$xsec=rownames(T_GHG_process_core)\n#T_GHG_process_model=merge(T_GHG_process_core,IOind_model,by=\"xsec\",all=T,sort=F)\n#GHG_process_model=aggregate(T_GHG_process_model[,(2:7)],list(T_GHG_process_model[,\"sector_row\"]),FUN=sum)\n\n#GHG_process_model_BR=merge(GHG_process_model,sec_BR,by.x=\"Group.1\",by.y=\"sector_ind\",all=T,sort=F)\n#GHG_process_model=GHG_process_model_BR\n#rownames(GHG_process_model)=GHG_process_model$sector_name\n#GHG_process_model=data.frame(t(GHG_process_model[,(2:7)]))\n\n############### Part F. reduce size and add process\nGHG_model_p=GHG_model/100000 # in 100,000 ton\n\n#GHG_process_model=GHG_process_model/100000\n\n\n#Total_ghg_process_model=t(data.frame(colSums(GHG_process_model)))\n#rownames(Total_ghg_process_model)=\"process\"\n#Total_ghg_process_model=data.frame(Total_ghg_process_model)\n#Total_ghg_process_model$Household=0\n\n\n#GHG_model=data.frame(t(cbind(t(GHG_model_p),t(Total_ghg_process_model))))\n\n\nGHG_model$Total=rowSums(GHG_model)\nmodel_total=colSums(GHG_model)\nGHG_model=rbind(GHG_model,t(data.frame(model_total)))\nrownames(GHG_model)[dim(GHG_model)[1]]=\"Total\"\n\n\n\n## change names used in GAMS coding: adding -a for activity, -c for commodity##\ncolnames(GHG_model)[1:nsector]=paste(colnames(GHG_model)[1:nsector],\"-a\",sep=\"\")\nNon_ind_r_model=is.na(match(rownames(GHG_model),c(\"process\",\"Total\")))\nrownames(GHG_model)[Non_ind_r_model]=paste(rownames(GHG_model)[Non_ind_r_model],\"-c\",sep=\"\")\n#colnames(GHG_process_model)[1:nsector]=paste(colnames(GHG_process_model)[1:nsector],\"-a\",sep=\"\")\n\n\n#Split Electricity column into Generation and Overhead (GEH and OtherE)\n\n##Step 1. Calculate split ratio\nsplitdata=read.csv(file=\"split_20160116.csv\",header=T, as.is=T)\nsplitdata[is.na(splitdata)]=0\nsplitname=splitdata[,1]\nsplitdata=splitdata[,-1]\n\nsplitdata$genR=splitdata[,\"genE\"]/rowSums(splitdata[,1:2])\nsplitdata$OtherR=splitdata[,\"otherE\"]/rowSums(splitdata[,1:2]) \nrownames(splitdata)=splitname\n\n##prepare GenE-a,OtherE-a column\nGHG_E=GHG_model\nGHG_E$GenE=GHG_model[,\"ELEC-a\"]\nGHG_E$OtherE=GHG_model[,\"ELEC-a\"]\nELECset=c(\"ELEC-c\")\nGASset=c(\"GAS-c\",\"HEAT-c\",\"LNG-c\")\nCoalset=c(\"CoalPro-c\",\"Coal-c\")\nOilset=c(\"Gasoline-c\",\"Jetoil-c\",\"Diesel-c\",\"Kerosene-c\",\"Fueloil-c\",\"LPG-c\",\"Oilpro-c\",\"Oil-c\")\n#Mset=\"process\"\n#colnames(GHG_E)[15:53]\n#Lset=c(\"Payroll\")\n#Kset=c(\"Surplus\",\"Deprec\")\n#Iset=c(\"PTAXin\",\"Resin\",\"PTAXetc\")\n\n##Step 3. split column\n\nGHG_E[match(ELECset,rownames(GHG_E)),\"GenE\"]=GHG_E[match(ELECset,rownames(GHG_E)),\"ELEC-a\"]*as.numeric(splitdata[\"ELEC\",\"genR\"])\nGHG_E[match(ELECset,rownames(GHG_E)),\"OtherE\"]=GHG_E[match(ELECset,rownames(GHG_E)),\"ELEC-a\"]*as.numeric(splitdata[\"ELEC\",\"OtherR\"])\n\nGHG_E[match(GASset,rownames(GHG_E)),\"GenE\"]=GHG_E[match(GASset,rownames(GHG_E)),\"ELEC-a\"]*as.numeric(splitdata[\"GASHeat\",\"genR\"])\nGHG_E[match(GASset,rownames(GHG_E)),\"OtherE\"]=GHG_E[match(GASset,rownames(GHG_E)),\"ELEC-a\"]*as.numeric(splitdata[\"GASHeat\",\"OtherR\"])\nGHG_E[match(Oilset,rownames(GHG_E)),\"GenE\"]=GHG_E[match(Oilset,rownames(GHG_E)),\"ELEC-a\"]*as.numeric(splitdata[\"OIL\",\"genR\"])\nGHG_E[match(Oilset,rownames(GHG_E)),\"OtherE\"]=GHG_E[match(Oilset,rownames(GHG_E)),\"ELEC-a\"]*as.numeric(splitdata[\"OIL\",\"OtherR\"])\nGHG_E[match(Coalset,rownames(GHG_E)),\"GenE\"]=GHG_E[match(Coalset,rownames(GHG_E)),\"ELEC-a\"]*as.numeric(splitdata[\"COAL\",\"genR\"])\nGHG_E[match(Coalset,rownames(GHG_E)),\"OtherE\"]=GHG_E[match(Coalset,rownames(GHG_E)),\"ELEC-a\"]*as.numeric(splitdata[\"COAL\",\"OtherR\"])\n\nmatchset=c(ELECset,GASset,Oilset,Coalset)\ntest1=rowSums(GHG_E[match(matchset,rownames(GHG_E)),c(\"GenE\",\"OtherE\")])-GHG_E[match(matchset,rownames(GHG_E)),\"ELEC-a\"]\ntest1=max(abs(test1))\ntest1\n\n## Step 4. Split process GHG and adjust total\nsplitdata_Total=colSums(splitdata[,1:(dim(splitdata)[2]-3)])\nsplittotal_genR=splitdata_Total[match(\"genE\",names(splitdata_Total))]/sum(splitdata_Total)\nsplittotal_OtherR=splitdata_Total[match(\"otherE\",names(splitdata_Total))]/sum(splitdata_Total)\n\nGHG_E[\"process\",\"GenE\"]=GHG_E[\"process\",\"ELEC-a\"]*splittotal_genR\nGHG_E[\"process\",\"OtherE\"]=GHG_E[\"process\",\"ELEC-a\"]*splittotal_OtherR\n\nGHG_E2=GHG_E[,c((dim(GHG_E)[2]-1):(dim(GHG_E)[2]),(2:(dim(GHG_E)[2]-2)))]\n\nGHG_E2[\"Total\",]=colSums(GHG_E2[(1:(dim(GHG_E2)[1]-1)),])\n\ncolnames(GHG_E2)[1:2]=c(\"GenE-a\",\"OtherE-a\")\n\ntest2=max(abs(rowSums(GHG_E2[,1:2])-GHG_E[,\"ELEC-a\"]))\ntest2\n\n##Step 5. split process GHG\n\nGHG_EP=GHG_process_model\nGHG_EP$GenE=GHG_EP[,\"ELEC-a\"]*splittotal_genR\nGHG_EP$OtherE=GHG_EP[,\"ELEC-a\"]*splittotal_OtherR\nGHG_EP2=GHG_EP[,c((dim(GHG_EP)[2]-1):(dim(GHG_EP)[2]),(2:(dim(GHG_EP)[2]-2)))]\ncolnames(GHG_EP2)[1:2]=c(\"GenE-a\",\"OtherE-a\")\n\ntest3=max(abs(rowSums(GHG_EP2[,1:2])-GHG_EP[,\"ELEC-a\"]))\ntest3\n\n## change column name HE to houseold\n\n\n# Split self TR\n\n##Step 1. Calculate split ratio\nsplitTR_Base=GHG_E2\nsplitTR=GHG_E2\nsplitTR[,]=0\n\n### (i) Household fuel share LPG and Diesel\nlibrary(foreign)\nlibrary(dplyr)\ncs2010=read.dta(file=\"cs2010_a.dta\")\nDiesel_Stat=cs2010 %>% select(contains(\"Diesel\"))%>% summarize_all(sum)\nDiesel_Transport_HE=Diesel_Stat$Diesel_car/Diesel_Stat$TDiesel\nLPG_Stats=cs2010 %>% select(contains(\"LPG\"))%>% summarize_all(sum)\nLPG_Transport_HE=LPG_Stats$LPG_car/LPG_Stats$TLPG\nDiesel_Transport_HE\nLPG_Transport_HE\n\nsplitTR[\"Diesel-c\",\"Household\"]=Diesel_Transport_HE\nsplitTR[\"LPG-c\",\"Household\"]=LPG_Transport_HE\n\n### (ii) industry fuel share LPG and Diesel (Apply Same share with Household)\nset.ind=c(\"IS\",\"Cement\",\"Chemistry\",\"WoodPaper\",\"FiberLeather\",\"Mineral\",\"nonISmetal\",\"Machine\",\"Electronics\",\"Semidis\",\"Auto\",\"Ship\",\"Food\",\"MissManu\")\nset.serv=c(\"Commercial\",\"Public\")\nset.ind.a=paste(set.ind,\"-a\",sep=\"\")\nset.serv.a=paste(set.serv,\"-a\",sep=\"\")\nsplitTR[\"Diesel-c\",match(c(set.ind.a,set.serv.a),colnames(splitTR))]=Diesel_Transport_HE\nsplitTR[\"LPG-c\",match(c(set.ind.a,set.serv.a),colnames(splitTR))]=LPG_Transport_HE\n\n### (iii) Gasoline in industry, service, household : all transportation.\nsplitTR[\"Gasoline-c\",match(c(set.ind.a,set.serv.a,\"Household\"),colnames(splitTR))]=1\n\n\n# Step 2. obtain splited industry and Household data (intermediate income)\nselfTR_input=splitTR_Base*splitTR\nselfTR_left=splitTR_Base-selfTR_input\n\n# Step 3. merge\n#column\nselfTR_col=data.frame(rowSums(selfTR_input))\nselfTR_row=data.frame(t(colSums(selfTR_input)))\nGHG_TR1=cbind(selfTR_left[,-1*match(c(\"Household\",\"Total\"),colnames(selfTR_left))],selfTR_col,selfTR_left[,match(c(\"Household\",\"Total\"),colnames(selfTR_left))])\ncolnames(GHG_TR1)[dim(GHG_TR1)[2]-2]=\"SelfTR-a\"\ncolnames(GHG_TR1)[dim(GHG_TR1)[2]]=\"Total\"\n\n# Step 4. recalculate sum\nGHG_TR1[\"Total\",]=colSums(GHG_TR1[1:(dim(GHG_TR1)[1]-1),])\nGHG_TR1$Total=rowSums(GHG_TR1[,1:(dim(GHG_TR1)[2]-1)])\n\n\n## split process emission: No adjustment. b/c selfTR is not likely emit any non CO2. \n\n## compartion of GHG (fuel) emission\n\ncompare.index=colnames(GHG_E2)\nd=colSums(GHG_E2[1:14,compare.index])-colSums(GHG_TR1[1:14,compare.index])\nd\nsum(d)-GHG_TR1[\"Total\",\"selfTR-a\"]\n\n\n\nwrite.csv(GHG_E2, file=\"GHG_model_Elec_20160911.csv\")\nwrite.csv(GHG_EP2, file=\"GHG_model_process_Elec_20160621.csv\")\nwrite.csv(GHG_TR1, file=\"GHG_model_EL_TR_20160913.csv\")\n\n\n\n\n\n#write.csv(GHG_E2, file=\"GHG_model_Elec_20160911.csv\")\n#write.csv(GHG_EP2, file=\"GHG_model_process_Elec_20160621.csv\")\n#write.csv(GHG_BR,file=\"GHG_BR_p_20160621.csv\")\n#write.csv(GHG_process_BR, file=\"GHG_BR_process_20160621.csv\")\n",
    "created" : 1474039340494.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3872154772",
    "id" : "D689DB2D",
    "lastKnownWriteTime" : 1474039538,
    "last_content_update" : 1474039538998,
    "path" : "C:/work_2016/0000_Hybrid_2nd/CGE/SAM/Elec/agg_e_20160914_EL_TR.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}