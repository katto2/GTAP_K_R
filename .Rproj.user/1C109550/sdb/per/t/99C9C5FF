{
    "collab_server" : "",
    "contents" : "######### Part A. preparation\n#(i)load GHG data\nE_IO=read.csv(file=\"EIO.csv\",header=T, as.is=T)\nE_IO[is.na(E_IO)]=0\nE_IO_ind=E_IO[,colnames(E_IO)!=\"Household\"]\nE_IO_F=E_IO[,colnames(E_IO)==\"Household\"]\n\n#load index mapping\nsector_ind=read.csv(file=\"indcode_20161202.csv\",header=T, as.is=T)\n\n#(ii)preparing index\nrow_ind=sector_ind[,1:2]\ncol_ind=sector_ind[,3:4]\nsec_group=sector_ind[,5:8]\nsec_BR=sector_ind[,c(5,6,15,16)]\n\nIOind_model=row_ind[(1:384),]\nsec_group=sec_group[!is.na(sec_group[,1]),]\nsec_BR=sec_BR[!is.na(sec_BR[,1]),]\n\n##(iii) preparing sector numbers\nnsector=dim(sec_group)[1]\nngroup=length(unique(sec_group[,3]))\nnBR=length(unique(sec_BR[,3]))\n\n## (iv) sector dictionary\nsec_dict=sec_group[,1:2]\ngroup_dict=unique(sec_group[,3:4])\nBR_dict=unique(sec_BR[,3:4])\n\n###### Part B. E_ind\n### I. IO to model\n## Step 1. get dimmension of IO\ndim_E_IO_ind=dim(E_IO_ind)\n\n## Step 2. Rowsum:  merge and obtain rowsum using aggregate function\nE_sec=merge(E_IO_ind,IOind_model, by.x=\"sector\", by.y=\"basecode_row\", all.x=T)\nE_row_37=aggregate(E_sec[,2:(dim_E_IO_ind[2])],list(E_sec$sector_row),FUN=sum)\n\n## Step 3. Colsum: transpose rowsum, merge with IOind_model index matching, take rowsum using aggregate function\n#3-1. keep row index\nrowindex_37=E_row_37[,1]\n#3-2. transpose\nT_E_37=data.frame(t(E_row_37))\nT_E_37=T_E_37[-1,]\nT_E_37$xsec=rownames(T_E_37)#preparing merging index\n\n#3-3. merge\nIOind_model$xsec=paste(\"X\",IOind_model[,1],sep=\"\")\nT_E_37_name=merge(T_E_37,IOind_model,by=\"xsec\",all.x=T,sort=F)\n\n#3-4. aggregate\n\nE_37_0=aggregate(T_E_37_name[,2:7],list(T_E_37_name$sector_row),FUN=sum)\nE_37_0=data.frame(t(E_37_0))\n\n## Step 4. set index for model IO\ncolindex_E_37=as.numeric(E_37_0[\"Group.1\",])\nrowindex_E_37=rowindex_37\n\n## Step 5.  keep only numeric values and transpose\nE_37_Ind=(E_37_0[-1,])\n## Step 6. Add row and column names\ncolnames(E_37_Ind)=sec_dict[colindex_E_37,2]\nrownames(E_37_Ind)=sec_dict[rowindex_E_37,2]\n\n### II. model to BR\n\n## Step 1. get dimmension of IO\n\ndim_E_37_Ind=dim(E_37_Ind)\n\n## Step 2. merge with group index and aggregate by group index\nE_37_BR=E_37_Ind\nE_37_BR$secname=rownames(E_37_BR)\nE_37_BRname=merge(E_37_BR, sec_BR, by.x=\"secname\", by.y=\"sector_name\", all.x=T,sort=F)\nE_row_BR=aggregate(E_37_BRname[,(2:(dim_E_37_Ind[2]+1))],list(E_37_BRname$BR_ind),FUN=sum)\n\n## Step 3. Colsum: transpose rowsum, merge with model_BR index matching, take rowsum using aggregate function\n#3-1. keep row index\nrowindex_BR=E_row_BR$Group.1\n#3-2. Transpose\nT_E_BR=data.frame(t(E_row_BR))\nT_E_BR=T_E_BR[-1,]\nT_E_BR$sec=rownames(T_E_BR)\n\n#3-3,merge with sec_BR index\n\nT_E_BR_name=merge(T_E_BR,sec_BR,by.x=\"sec\", by.y=\"sector_name\",all.x=T,sort=F)\n\n#3-4. aggregate\n\nE_BR_0=aggregate(T_E_BR_name[,2:5],list(T_E_BR_name$BR_ind),FUN=sum)\nE_BR_0=data.frame(t(E_BR_0))\n\n## step 4. Obtain BR IO \n#4-1. row and column name index\ncolindex_BR=as.numeric(E_BR_0[\"Group.1\",])\nrowindex_BR=as.numeric(rowindex_BR)\n\n#4-2. keep data\nE_BR_ind=E_BR_0[-1,]\n\n#4-3 add names\n\ncolnames(E_BR_ind)=BR_dict[colindex_BR,2]\nrownames(E_BR_ind)=BR_dict[rowindex_BR,2]\n\n### III. model to Group\n\n## Step 1. get dimmension of IO\n\ndim_E_37_Ind=dim(E_37_Ind)\n\n## Step 2. merge with group index and aggregate by group index\nE_37_GR=E_37_Ind\nE_37_GR$secname=rownames(E_37_GR)\nE_37_GRname=merge(E_37_GR, sec_group, by.x=\"secname\", by.y=\"sector_name\", all.x=T,sort=F)\nE_row_GR=aggregate(E_37_GRname[,(2:(dim_E_37_Ind[2]+1))],list(E_37_GRname$Group_ind),FUN=sum)\n\n## Step 3. Colsum: transpose rowsum, merge with model_BR index matching, take rowsum using aggregate function\n#3-1. keep row index\nrowindex_GR=E_row_GR$Group.1\n#3-2. Transpose\nT_E_GR=data.frame(t(E_row_GR))\nT_E_GR=T_E_GR[-1,]\nT_E_GR$sec=rownames(T_E_GR)\n\n#3-3,merge with sec_GR index\n\nT_E_GR_name=merge(T_E_GR,sec_group,by.x=\"sec\", by.y=\"sector_name\",all.x=T,sort=F)\n\n#3-4. aggregate\n\nE_GR_0=aggregate(T_E_GR_name[,2:3],list(T_E_GR_name$Group_ind),FUN=sum)\nE_GR_0=data.frame(t(E_GR_0))\n\n## step 4. Obtain BR IO \n#4-1. row and column name index\ncolindex_GR=as.numeric(E_GR_0[\"Group.1\",])\nrowindex_GR=as.numeric(rowindex_GR)\n\n#4-2. keep data\nE_GR_ind=E_GR_0[-1,]\n\n#4-3 add names\n\ncolnames(E_GR_ind)=group_dict[colindex_GR,2]\nrownames(E_GR_ind)=group_dict[rowindex_GR,2]\n\n\n###### Part D. E_F\n\n## (i) data preparation\nE_IO_F=data.frame(cbind(E_IO$sector,E_IO_F))\ncolnames(E_IO_F)=c(\"sector\",\"Household\")\n\n##(ii) model E_F\n# step 1. merge with model ind\nE_F_model=merge(E_IO_F,IOind_model, by.x=\"sector\", by.y=\"basecode_row\",all.x=T,sort=F)\n\n# step 2. aggregate by \"sector_row(model variable)\"\n\nE_F_model=data.frame(aggregate(E_F_model[,\"Household\"],list(E_F_model[,\"sector_row\"]),FUN=sum))\n\n# step 3. obtain model F \nrownames(E_F_model)=sec_dict[E_F_model[,\"Group.1\"],2]\ncolnames(E_F_model)=c(\"model_ind\", \"Household\")\n\n\n##(iii) BR E_F\n#step 1. merge with BR ind\n\nE_F_BR=merge(E_F_model, sec_BR, by.x=\"model_ind\", by.y=\"sector_ind\", all.x=T, sort=F)\n\n\n# step 2. aggregate by \"BR_ind(BR variable)\"\n\n\nE_F_BR=data.frame(aggregate((E_F_BR[,\"Household\"]),list(E_F_BR[,\"BR_ind\"]),FUN=sum))\n\n# step 3. obtain BR F \nrownames(E_F_BR)=BR_dict[E_F_BR[,\"Group.1\"],2]\ncolnames(E_F_BR)=c(\"BR_ind\", \"Household\")\n\n\n##(iv) group E_F\n#step 1. merge with GR ind\n\nE_F_GR=merge(E_F_model, sec_group, by.x=\"model_ind\", by.y=\"sector_ind\", all.x=T, sort=F)\n\n\n# step 2. aggregate by \"Group_ind(Group variable)\"\n\n\nE_F_GR=data.frame(aggregate((E_F_GR[,\"Household\"]),list(E_F_GR[,\"Group_ind\"]),FUN=sum))\n\n# step 3. obtain BR F \nrownames(E_F_GR)=group_dict[E_F_GR[,\"Group.1\"],2]\ncolnames(E_F_GR)=c(\"Group_ind\", \"Household\")\n\n\n############### Part D. merge IND and F\nE_37_Ind$rowindex=rownames(E_37_Ind)\nE_F_model$rowindex=rownames(E_F_model)\nE_F_model=E_F_model[-1]\nE_model=merge(E_37_Ind,E_F_model, by=\"rowindex\",all=T,sort=F)\nrownames(E_model)=E_model$rowindex\nE_model=E_model[,-1]\n\nE_BR_ind$rowindex=rownames(E_BR_ind)\nE_F_BR$rowindex=rownames(E_F_BR)\nE_F_BR=E_F_BR[,-1]\nE_BR=merge(E_BR_ind,E_F_BR,by=\"rowindex\",all=T,sort=F)\nrownames(E_BR)=E_BR$rowindex\nE_BR=E_BR[,-1]\n\nE_GR_ind$rowindex=rownames(E_GR_ind)\nE_F_GR$rowindex=rownames(E_F_GR)\nE_F_GR=E_F_GR[,-1]\nE_GR=merge(E_GR_ind,E_F_GR,by=\"rowindex\",all=T,sort=F)\nrownames(E_GR)=E_GR$rowindex\nE_GR=E_GR[,-1]\n\n############### Part E. add total\n\nE_model=rbind(E_model,colSums(E_model))\nE_BR=rbind(E_BR,colSums(E_BR))\nE_GR=rbind(E_GR,colSums(E_GR))\n\nE_model=cbind(E_model,rowSums(E_model))\nE_BR=cbind(E_BR,rowSums(E_BR))\nE_GR=cbind(E_GR,rowSums(E_GR))\n\nrownames(E_model)[dim(E_model)[1]]=\"Total\"\nrownames(E_BR)[dim(E_BR)[1]]=\"Total\"\nrownames(E_GR)[dim(E_GR)[1]]=\"Total\"\n\ncolnames(E_model)[dim(E_model)[2]]=\"Total\"\ncolnames(E_BR)[dim(E_BR)[2]]=\"Total\"\ncolnames(E_GR)[dim(E_GR)[2]]=\"Total\"\n\n#Split Electricity column into Generation and Overhead (GEH and OtherE)\n\n##Step 1. Calculate split ratio\nsplitdata=read.csv(file=\"split_20160116.csv\",header=T, as.is=T)\nsplitdata[is.na(splitdata)]=0\nsplitname=splitdata[,1]\nsplitdata=splitdata[,-1]\nsplitdata_o=splitdata\n\nsplitdata$genR=splitdata[,\"genE\"]/rowSums(splitdata[,1:2])\nsplitdata$OtherR=splitdata[,\"otherE\"]/rowSums(splitdata[,1:2]) \nrownames(splitdata)=splitname\n\n##prepare GenE-a,OtherE-a column\nE_BR_elec=E_BR\nE_BR_elec$GenE=E_BR[,\"ELEC\"]\nE_BR_elec$OtherE=E_BR[,\"ELEC\"]\n\nEset=c(\"ELEC\",\"GASHeat\",\"OIL\",\"COAL\")\nE_BR_elec[\"ELEC\",\"GenE\"]=E_BR_elec[\"ELEC\",\"GenE\"]*as.numeric(splitdata[\"ELEC\",\"genR\"])\nE_BR_elec[\"ELEC\",\"OtherE\"]=E_BR_elec[\"ELEC\",\"OtherE\"]*as.numeric(splitdata[\"ELEC\",\"OtherR\"])\nE_BR_elec[\"GASHeat\",\"GenE\"]=E_BR_elec[\"GASHeat\",\"GenE\"]*as.numeric(splitdata[\"GASHeat\",\"genR\"])\nE_BR_elec[\"GASHeat\",\"OtherE\"]=E_BR_elec[\"GASHeat\",\"OtherE\"]*as.numeric(splitdata[\"GASHeat\",\"OtherR\"])\nE_BR_elec[\"OIL\",\"GenE\"]=E_BR_elec[\"OIL\",\"GenE\"]*as.numeric(splitdata[\"OIL\",\"genR\"])\nE_BR_elec[\"OIL\",\"OtherE\"]=E_BR_elec[\"OIL\",\"OtherE\"]*as.numeric(splitdata[\"OIL\",\"OtherR\"])\nE_BR_elec[\"COAL\",\"GenE\"]=E_BR_elec[\"COAL\",\"GenE\"]*as.numeric(splitdata[\"COAL\",\"genR\"])\nE_BR_elec[\"COAL\",\"OtherE\"]=E_BR_elec[\"COAL\",\"OtherE\"]*as.numeric(splitdata[\"COAL\",\"OtherR\"])\n\n\n\n\nE_BR_elec2=E_BR_elec[,c((dim(E_BR_elec)[2]-1):(dim(E_BR_elec)[2]),(2:(dim(E_BR_elec)[2]-2)))]\n\nE_BR_elec2[\"Total\",]=colSums(E_BR_elec2[(1:(dim(E_BR_elec2)[1]-1)),])\n\n\n\n\nwrite.csv(E_model, file=\"E_model.csv\")\nwrite.csv(E_BR,file=\"E_BR.csv\")\nwrite.csv(E_GR,file=\"E_GR.csv\")\nwrite.csv(E_BR_elec2,file=\"E_BR_elec_20160116.csv\")\n",
    "created" : 1474037665315.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1738710959",
    "id" : "99C9C5FF",
    "lastKnownWriteTime" : 1474037750,
    "last_content_update" : 1474037750707,
    "path" : "C:/work_2016/0000_Hybrid_2nd/CGE/SAM/Elec/agg_e_20160914_Elec.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}